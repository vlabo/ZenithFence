// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VerdictResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsVerdictResponse(buf []byte, offset flatbuffers.UOffsetT) *VerdictResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VerdictResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsVerdictResponse(buf []byte, offset flatbuffers.UOffsetT) *VerdictResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VerdictResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *VerdictResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VerdictResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VerdictResponse) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *VerdictResponse) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *VerdictResponse) Verdict() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *VerdictResponse) MutateVerdict(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func VerdictResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func VerdictResponseAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func VerdictResponseAddVerdict(builder *flatbuffers.Builder, verdict int8) {
	builder.PrependInt8Slot(1, verdict, 0)
}
func VerdictResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
