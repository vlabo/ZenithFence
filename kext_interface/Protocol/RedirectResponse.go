// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RedirectResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsRedirectResponse(buf []byte, offset flatbuffers.UOffsetT) *RedirectResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RedirectResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRedirectResponse(buf []byte, offset flatbuffers.UOffsetT) *RedirectResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RedirectResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RedirectResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RedirectResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RedirectResponse) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RedirectResponse) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *RedirectResponse) Ipv6() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *RedirectResponse) MutateIpv6(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *RedirectResponse) RemoteIp(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RedirectResponse) RemoteIpLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RedirectResponse) RemoteIpBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RedirectResponse) MutateRemoteIp(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *RedirectResponse) RemotePort() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RedirectResponse) MutateRemotePort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func RedirectResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RedirectResponseAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func RedirectResponseAddIpv6(builder *flatbuffers.Builder, ipv6 bool) {
	builder.PrependBoolSlot(1, ipv6, false)
}
func RedirectResponseAddRemoteIp(builder *flatbuffers.Builder, remoteIp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(remoteIp), 0)
}
func RedirectResponseStartRemoteIpVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RedirectResponseAddRemotePort(builder *flatbuffers.Builder, remotePort uint16) {
	builder.PrependUint16Slot(3, remotePort, 0)
}
func RedirectResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
